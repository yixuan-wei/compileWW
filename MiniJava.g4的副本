grammar MiniJava;
goal: mainClass (classDeclaration)* EOF;
mainClass: 'class' Identifier '{' 'public' 'static' 'void' 'main' '(' 'String' '[' ']' Identifier ')' '{' Statement '}' '}';
classDeclaration: 'class' Identifier ('extends' Identifier)? '{'(varDeclaration)* (methodDeclaration)* '}';
varDeclaration: Type Identifier ';';
methodDeclaration: 'public' Type Identifier '(' (Type Identifier (',' Type Identifier)* )? ')' '{' (varDeclaration)* (Statement)* 'return' expression ';' '}';
Type: 'int' '[' ']'
    | 'boolean'
    | 'int'
    | Identifier;
Statement: '{' (Statement)* '}'
         | 'if' '(' expression ')' Statement 'else' Statement
         | 'while' '(' expression ')' Statement
         | 'System.out.println' '(' expression ')' ';'
         | Identifier '=' expression ';'
         | Identifier '[' expression ']' '=' expression ';';

INT: ([0]|[1-9][0-9]+);

expression: expression ('&&' | '<' | '+' | '-' | '*') expression
            | expression '[' expression ']'
            | expression '.' 'length'
            | expression '.' Identifier '(' (expression (',' expression)*)? ')'
            | INT
            | 'true'
            | 'false'
            | Identifier
            | 'this'
            | 'new' 'int' '[' expression ']'
            | 'new' Identifier '(' ')'
            | '!' expression
            | '(' expression ')';

Identifier: [a-zA-Z][_0-9a-zA-Z]?;