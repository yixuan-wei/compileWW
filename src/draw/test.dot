digraph AST{
0[label="goal
classBinarySearch{publicstaticvoidmain(String[]a){System.out.println(newBS().Start(20));}}classBS{int[]number;intsize;publicintStart(intsz){intaux01;intaux02;aux01=this.Init(sz);aux02=this.Print();if(this.Search(8))System.out.println(1);elseSystem.out.println(0);if(this.Search(19))System.out.println(1);elseSystem.out.println(0);if(this.Search(20))System.out.println(1);elseSystem.out.println(0);if(this.Search(21))System.out.println(1);elseSystem.out.println(0);if(this.Search(37))System.out.println(1);elseSystem.out.println(0);if(this.Search(38))System.out.println(1);elseSystem.out.println(0);if(this.Search(39))System.out.println(1);elseSystem.out.println(0);if(this.Search(50))System.out.println(1);elseSystem.out.println(0);return999;}publicbooleanSearch(intnum){booleanbs01;intright;intleft;booleanvar_cont;intmedium;intaux01;intnt;aux01=0;bs01=false;right=number.length;right=right-1;left=0;var_cont=true;while(var_cont){medium=left+right;medium=this.Div(medium);aux01=number[medium];if(num<aux01)right=medium-1;elseleft=medium+1;if(this.Compare(aux01,num))var_cont=false;elsevar_cont=true;if(right<left)var_cont=false;elsent=0;}if(this.Compare(aux01,num))bs01=true;elsebs01=false;returnbs01;}publicintDiv(intnum){intcount01;intcount02;intaux03;count01=0;count02=0;aux03=num-1;while(count02<aux03){count01=count01+1;count02=count02+2;}returncount01;}publicbooleanCompare(intnum1,intnum2){booleanretval;intaux02;retval=false;aux02=num2+1;if(num1<num2)retval=false;elseif(!(num1<aux02))retval=false;elseretval=true;returnretval;}publicintPrint(){intj;j=1;while(j<(size)){System.out.println(number[j]);j=j+1;}System.out.println(99999);return0;}publicintInit(intsz){intj;intk;intaux02;intaux01;size=sz;number=newint[sz];j=1;k=size+1;while(j<(size)){aux01=2*j;aux02=k-3;number[j]=aux01+aux02;j=j+1;k=k-1;}return0;}}<EOF>"]
00[label="mainClass
classBinarySearch{publicstaticvoidmain(String[]a){System.out.println(newBS().Start(20));}}"]
0->00
000[label="Identifier
BinarySearch"]
00->000
001[label="Identifier
a"]
00->001
002[label="statement
System.out.println(newBS().Start(20));"]
00->002
0020[label="expression
newBS().Start(20)"]
002->0020
00200[label="expression
newBS()"]
0020->00200
002000[label="Identifier
BS"]
00200->002000
00201[label="Identifier
Start"]
0020->00201
00202[label="expression
20"]
0020->00202
002020[label="INT
20"]
00202->002020
01[label="classDeclaration
classBS{int[]number;intsize;publicintStart(intsz){intaux01;intaux02;aux01=this.Init(sz);aux02=this.Print();if(this.Search(8))System.out.println(1);elseSystem.out.println(0);if(this.Search(19))System.out.println(1);elseSystem.out.println(0);if(this.Search(20))System.out.println(1);elseSystem.out.println(0);if(this.Search(21))System.out.println(1);elseSystem.out.println(0);if(this.Search(37))System.out.println(1);elseSystem.out.println(0);if(this.Search(38))System.out.println(1);elseSystem.out.println(0);if(this.Search(39))System.out.println(1);elseSystem.out.println(0);if(this.Search(50))System.out.println(1);elseSystem.out.println(0);return999;}publicbooleanSearch(intnum){booleanbs01;intright;intleft;booleanvar_cont;intmedium;intaux01;intnt;aux01=0;bs01=false;right=number.length;right=right-1;left=0;var_cont=true;while(var_cont){medium=left+right;medium=this.Div(medium);aux01=number[medium];if(num<aux01)right=medium-1;elseleft=medium+1;if(this.Compare(aux01,num))var_cont=false;elsevar_cont=true;if(right<left)var_cont=false;elsent=0;}if(this.Compare(aux01,num))bs01=true;elsebs01=false;returnbs01;}publicintDiv(intnum){intcount01;intcount02;intaux03;count01=0;count02=0;aux03=num-1;while(count02<aux03){count01=count01+1;count02=count02+2;}returncount01;}publicbooleanCompare(intnum1,intnum2){booleanretval;intaux02;retval=false;aux02=num2+1;if(num1<num2)retval=false;elseif(!(num1<aux02))retval=false;elseretval=true;returnretval;}publicintPrint(){intj;j=1;while(j<(size)){System.out.println(number[j]);j=j+1;}System.out.println(99999);return0;}publicintInit(intsz){intj;intk;intaux02;intaux01;size=sz;number=newint[sz];j=1;k=size+1;while(j<(size)){aux01=2*j;aux02=k-3;number[j]=aux01+aux02;j=j+1;k=k-1;}return0;}}"]
0->01
010[label="Identifier
BS"]
01->010
011[label="varDeclaration
int[]number;"]
01->011
0110[label="type
int[]"]
011->0110
0111[label="Identifier
number"]
011->0111
012[label="varDeclaration
intsize;"]
01->012
0120[label="type
int"]
012->0120
0121[label="Identifier
size"]
012->0121
013[label="methodDeclaration
publicintStart(intsz){intaux01;intaux02;aux01=this.Init(sz);aux02=this.Print();if(this.Search(8))System.out.println(1);elseSystem.out.println(0);if(this.Search(19))System.out.println(1);elseSystem.out.println(0);if(this.Search(20))System.out.println(1);elseSystem.out.println(0);if(this.Search(21))System.out.println(1);elseSystem.out.println(0);if(this.Search(37))System.out.println(1);elseSystem.out.println(0);if(this.Search(38))System.out.println(1);elseSystem.out.println(0);if(this.Search(39))System.out.println(1);elseSystem.out.println(0);if(this.Search(50))System.out.println(1);elseSystem.out.println(0);return999;}"]
01->013
0130[label="type
int"]
013->0130
0131[label="Identifier
Start"]
013->0131
0132[label="type
int"]
013->0132
0133[label="Identifier
sz"]
013->0133
0134[label="varDeclaration
intaux01;"]
013->0134
01340[label="type
int"]
0134->01340
01341[label="Identifier
aux01"]
0134->01341
0135[label="varDeclaration
intaux02;"]
013->0135
01350[label="type
int"]
0135->01350
01351[label="Identifier
aux02"]
0135->01351
0136[label="statement
aux01=this.Init(sz);"]
013->0136
01360[label="Identifier
aux01"]
0136->01360
01361[label="expression
this.Init(sz)"]
0136->01361
013610[label="expression
this"]
01361->013610
013611[label="Identifier
Init"]
01361->013611
013612[label="expression
sz"]
01361->013612
0136120[label="Identifier
sz"]
013612->0136120
0137[label="statement
aux02=this.Print();"]
013->0137
01370[label="Identifier
aux02"]
0137->01370
01371[label="expression
this.Print()"]
0137->01371
013710[label="expression
this"]
01371->013710
013711[label="Identifier
Print"]
01371->013711
0138[label="statement
if(this.Search(8))System.out.println(1);elseSystem.out.println(0);"]
013->0138
01380[label="expression
this.Search(8)"]
0138->01380
013800[label="expression
this"]
01380->013800
013801[label="Identifier
Search"]
01380->013801
013802[label="expression
8"]
01380->013802
0138020[label="INT
8"]
013802->0138020
01381[label="statement
System.out.println(1);"]
0138->01381
013810[label="expression
1"]
01381->013810
0138100[label="INT
1"]
013810->0138100
01382[label="statement
System.out.println(0);"]
0138->01382
013820[label="expression
0"]
01382->013820
0138200[label="INT
0"]
013820->0138200
0139[label="statement
if(this.Search(19))System.out.println(1);elseSystem.out.println(0);"]
013->0139
01390[label="expression
this.Search(19)"]
0139->01390
013900[label="expression
this"]
01390->013900
013901[label="Identifier
Search"]
01390->013901
013902[label="expression
19"]
01390->013902
0139020[label="INT
19"]
013902->0139020
01391[label="statement
System.out.println(1);"]
0139->01391
013910[label="expression
1"]
01391->013910
0139100[label="INT
1"]
013910->0139100
01392[label="statement
System.out.println(0);"]
0139->01392
013920[label="expression
0"]
01392->013920
0139200[label="INT
0"]
013920->0139200
01310[label="statement
if(this.Search(20))System.out.println(1);elseSystem.out.println(0);"]
013->01310
013100[label="expression
this.Search(20)"]
01310->013100
0131000[label="expression
this"]
013100->0131000
0131001[label="Identifier
Search"]
013100->0131001
0131002[label="expression
20"]
013100->0131002
01310020[label="INT
20"]
0131002->01310020
013101[label="statement
System.out.println(1);"]
01310->013101
0131010[label="expression
1"]
013101->0131010
01310100[label="INT
1"]
0131010->01310100
013102[label="statement
System.out.println(0);"]
01310->013102
0131020[label="expression
0"]
013102->0131020
01310200[label="INT
0"]
0131020->01310200
01311[label="statement
if(this.Search(21))System.out.println(1);elseSystem.out.println(0);"]
013->01311
013110[label="expression
this.Search(21)"]
01311->013110
0131100[label="expression
this"]
013110->0131100
0131101[label="Identifier
Search"]
013110->0131101
0131102[label="expression
21"]
013110->0131102
01311020[label="INT
21"]
0131102->01311020
013111[label="statement
System.out.println(1);"]
01311->013111
0131110[label="expression
1"]
013111->0131110
01311100[label="INT
1"]
0131110->01311100
013112[label="statement
System.out.println(0);"]
01311->013112
0131120[label="expression
0"]
013112->0131120
01311200[label="INT
0"]
0131120->01311200
01312[label="statement
if(this.Search(37))System.out.println(1);elseSystem.out.println(0);"]
013->01312
013120[label="expression
this.Search(37)"]
01312->013120
0131200[label="expression
this"]
013120->0131200
0131201[label="Identifier
Search"]
013120->0131201
0131202[label="expression
37"]
013120->0131202
01312020[label="INT
37"]
0131202->01312020
013121[label="statement
System.out.println(1);"]
01312->013121
0131210[label="expression
1"]
013121->0131210
01312100[label="INT
1"]
0131210->01312100
013122[label="statement
System.out.println(0);"]
01312->013122
0131220[label="expression
0"]
013122->0131220
01312200[label="INT
0"]
0131220->01312200
01313[label="statement
if(this.Search(38))System.out.println(1);elseSystem.out.println(0);"]
013->01313
013130[label="expression
this.Search(38)"]
01313->013130
0131300[label="expression
this"]
013130->0131300
0131301[label="Identifier
Search"]
013130->0131301
0131302[label="expression
38"]
013130->0131302
01313020[label="INT
38"]
0131302->01313020
013131[label="statement
System.out.println(1);"]
01313->013131
0131310[label="expression
1"]
013131->0131310
01313100[label="INT
1"]
0131310->01313100
013132[label="statement
System.out.println(0);"]
01313->013132
0131320[label="expression
0"]
013132->0131320
01313200[label="INT
0"]
0131320->01313200
01314[label="statement
if(this.Search(39))System.out.println(1);elseSystem.out.println(0);"]
013->01314
013140[label="expression
this.Search(39)"]
01314->013140
0131400[label="expression
this"]
013140->0131400
0131401[label="Identifier
Search"]
013140->0131401
0131402[label="expression
39"]
013140->0131402
01314020[label="INT
39"]
0131402->01314020
013141[label="statement
System.out.println(1);"]
01314->013141
0131410[label="expression
1"]
013141->0131410
01314100[label="INT
1"]
0131410->01314100
013142[label="statement
System.out.println(0);"]
01314->013142
0131420[label="expression
0"]
013142->0131420
01314200[label="INT
0"]
0131420->01314200
01315[label="statement
if(this.Search(50))System.out.println(1);elseSystem.out.println(0);"]
013->01315
013150[label="expression
this.Search(50)"]
01315->013150
0131500[label="expression
this"]
013150->0131500
0131501[label="Identifier
Search"]
013150->0131501
0131502[label="expression
50"]
013150->0131502
01315020[label="INT
50"]
0131502->01315020
013151[label="statement
System.out.println(1);"]
01315->013151
0131510[label="expression
1"]
013151->0131510
01315100[label="INT
1"]
0131510->01315100
013152[label="statement
System.out.println(0);"]
01315->013152
0131520[label="expression
0"]
013152->0131520
01315200[label="INT
0"]
0131520->01315200
01316[label="expression
999"]
013->01316
013160[label="INT
999"]
01316->013160
014[label="methodDeclaration
publicbooleanSearch(intnum){booleanbs01;intright;intleft;booleanvar_cont;intmedium;intaux01;intnt;aux01=0;bs01=false;right=number.length;right=right-1;left=0;var_cont=true;while(var_cont){medium=left+right;medium=this.Div(medium);aux01=number[medium];if(num<aux01)right=medium-1;elseleft=medium+1;if(this.Compare(aux01,num))var_cont=false;elsevar_cont=true;if(right<left)var_cont=false;elsent=0;}if(this.Compare(aux01,num))bs01=true;elsebs01=false;returnbs01;}"]
01->014
0140[label="type
boolean"]
014->0140
0141[label="Identifier
Search"]
014->0141
0142[label="type
int"]
014->0142
0143[label="Identifier
num"]
014->0143
0144[label="varDeclaration
booleanbs01;"]
014->0144
01440[label="type
boolean"]
0144->01440
01441[label="Identifier
bs01"]
0144->01441
0145[label="varDeclaration
intright;"]
014->0145
01450[label="type
int"]
0145->01450
01451[label="Identifier
right"]
0145->01451
0146[label="varDeclaration
intleft;"]
014->0146
01460[label="type
int"]
0146->01460
01461[label="Identifier
left"]
0146->01461
0147[label="varDeclaration
booleanvar_cont;"]
014->0147
01470[label="type
boolean"]
0147->01470
01471[label="Identifier
var_cont"]
0147->01471
0148[label="varDeclaration
intmedium;"]
014->0148
01480[label="type
int"]
0148->01480
01481[label="Identifier
medium"]
0148->01481
0149[label="varDeclaration
intaux01;"]
014->0149
01490[label="type
int"]
0149->01490
01491[label="Identifier
aux01"]
0149->01491
01410[label="varDeclaration
intnt;"]
014->01410
014100[label="type
int"]
01410->014100
014101[label="Identifier
nt"]
01410->014101
01411[label="statement
aux01=0;"]
014->01411
014110[label="Identifier
aux01"]
01411->014110
014111[label="expression
0"]
01411->014111
0141110[label="INT
0"]
014111->0141110
01412[label="statement
bs01=false;"]
014->01412
014120[label="Identifier
bs01"]
01412->014120
014121[label="expression
false"]
01412->014121
01413[label="statement
right=number.length;"]
014->01413
014130[label="Identifier
right"]
01413->014130
014131[label="expression
number.length"]
01413->014131
0141310[label="expression
number"]
014131->0141310
01413100[label="Identifier
number"]
0141310->01413100
01414[label="statement
right=right-1;"]
014->01414
014140[label="Identifier
right"]
01414->014140
014141[label="expression
right-1"]
01414->014141
0141410[label="expression
right"]
014141->0141410
01414100[label="Identifier
right"]
0141410->01414100
0141411[label="expression
1"]
014141->0141411
01414110[label="INT
1"]
0141411->01414110
01415[label="statement
left=0;"]
014->01415
014150[label="Identifier
left"]
01415->014150
014151[label="expression
0"]
01415->014151
0141510[label="INT
0"]
014151->0141510
01416[label="statement
var_cont=true;"]
014->01416
014160[label="Identifier
var_cont"]
01416->014160
014161[label="expression
true"]
01416->014161
01417[label="statement
while(var_cont){medium=left+right;medium=this.Div(medium);aux01=number[medium];if(num<aux01)right=medium-1;elseleft=medium+1;if(this.Compare(aux01,num))var_cont=false;elsevar_cont=true;if(right<left)var_cont=false;elsent=0;}"]
014->01417
014170[label="expression
var_cont"]
01417->014170
0141700[label="Identifier
var_cont"]
014170->0141700
014171[label="statement
{medium=left+right;medium=this.Div(medium);aux01=number[medium];if(num<aux01)right=medium-1;elseleft=medium+1;if(this.Compare(aux01,num))var_cont=false;elsevar_cont=true;if(right<left)var_cont=false;elsent=0;}"]
01417->014171
0141710[label="statement
medium=left+right;"]
014171->0141710
01417100[label="Identifier
medium"]
0141710->01417100
01417101[label="expression
left+right"]
0141710->01417101
014171010[label="expression
left"]
01417101->014171010
0141710100[label="Identifier
left"]
014171010->0141710100
014171011[label="expression
right"]
01417101->014171011
0141710110[label="Identifier
right"]
014171011->0141710110
0141711[label="statement
medium=this.Div(medium);"]
014171->0141711
01417110[label="Identifier
medium"]
0141711->01417110
01417111[label="expression
this.Div(medium)"]
0141711->01417111
014171110[label="expression
this"]
01417111->014171110
014171111[label="Identifier
Div"]
01417111->014171111
014171112[label="expression
medium"]
01417111->014171112
0141711120[label="Identifier
medium"]
014171112->0141711120
0141712[label="statement
aux01=number[medium];"]
014171->0141712
01417120[label="Identifier
aux01"]
0141712->01417120
01417121[label="expression
number[medium]"]
0141712->01417121
014171210[label="expression
number"]
01417121->014171210
0141712100[label="Identifier
number"]
014171210->0141712100
014171211[label="expression
medium"]
01417121->014171211
0141712110[label="Identifier
medium"]
014171211->0141712110
0141713[label="statement
if(num<aux01)right=medium-1;elseleft=medium+1;"]
014171->0141713
01417130[label="expression
num<aux01"]
0141713->01417130
014171300[label="expression
num"]
01417130->014171300
0141713000[label="Identifier
num"]
014171300->0141713000
014171301[label="expression
aux01"]
01417130->014171301
0141713010[label="Identifier
aux01"]
014171301->0141713010
01417131[label="statement
right=medium-1;"]
0141713->01417131
014171310[label="Identifier
right"]
01417131->014171310
014171311[label="expression
medium-1"]
01417131->014171311
0141713110[label="expression
medium"]
014171311->0141713110
01417131100[label="Identifier
medium"]
0141713110->01417131100
0141713111[label="expression
1"]
014171311->0141713111
01417131110[label="INT
1"]
0141713111->01417131110
01417132[label="statement
left=medium+1;"]
0141713->01417132
014171320[label="Identifier
left"]
01417132->014171320
014171321[label="expression
medium+1"]
01417132->014171321
0141713210[label="expression
medium"]
014171321->0141713210
01417132100[label="Identifier
medium"]
0141713210->01417132100
0141713211[label="expression
1"]
014171321->0141713211
01417132110[label="INT
1"]
0141713211->01417132110
0141714[label="statement
if(this.Compare(aux01,num))var_cont=false;elsevar_cont=true;"]
014171->0141714
01417140[label="expression
this.Compare(aux01,num)"]
0141714->01417140
014171400[label="expression
this"]
01417140->014171400
014171401[label="Identifier
Compare"]
01417140->014171401
014171402[label="expression
aux01"]
01417140->014171402
0141714020[label="Identifier
aux01"]
014171402->0141714020
014171403[label="expression
num"]
01417140->014171403
0141714030[label="Identifier
num"]
014171403->0141714030
01417141[label="statement
var_cont=false;"]
0141714->01417141
014171410[label="Identifier
var_cont"]
01417141->014171410
014171411[label="expression
false"]
01417141->014171411
01417142[label="statement
var_cont=true;"]
0141714->01417142
014171420[label="Identifier
var_cont"]
01417142->014171420
014171421[label="expression
true"]
01417142->014171421
0141715[label="statement
if(right<left)var_cont=false;elsent=0;"]
014171->0141715
01417150[label="expression
right<left"]
0141715->01417150
014171500[label="expression
right"]
01417150->014171500
0141715000[label="Identifier
right"]
014171500->0141715000
014171501[label="expression
left"]
01417150->014171501
0141715010[label="Identifier
left"]
014171501->0141715010
01417151[label="statement
var_cont=false;"]
0141715->01417151
014171510[label="Identifier
var_cont"]
01417151->014171510
014171511[label="expression
false"]
01417151->014171511
01417152[label="statement
nt=0;"]
0141715->01417152
014171520[label="Identifier
nt"]
01417152->014171520
014171521[label="expression
0"]
01417152->014171521
0141715210[label="INT
0"]
014171521->0141715210
01418[label="statement
if(this.Compare(aux01,num))bs01=true;elsebs01=false;"]
014->01418
014180[label="expression
this.Compare(aux01,num)"]
01418->014180
0141800[label="expression
this"]
014180->0141800
0141801[label="Identifier
Compare"]
014180->0141801
0141802[label="expression
aux01"]
014180->0141802
01418020[label="Identifier
aux01"]
0141802->01418020
0141803[label="expression
num"]
014180->0141803
01418030[label="Identifier
num"]
0141803->01418030
014181[label="statement
bs01=true;"]
01418->014181
0141810[label="Identifier
bs01"]
014181->0141810
0141811[label="expression
true"]
014181->0141811
014182[label="statement
bs01=false;"]
01418->014182
0141820[label="Identifier
bs01"]
014182->0141820
0141821[label="expression
false"]
014182->0141821
01419[label="expression
bs01"]
014->01419
014190[label="Identifier
bs01"]
01419->014190
015[label="methodDeclaration
publicintDiv(intnum){intcount01;intcount02;intaux03;count01=0;count02=0;aux03=num-1;while(count02<aux03){count01=count01+1;count02=count02+2;}returncount01;}"]
01->015
0150[label="type
int"]
015->0150
0151[label="Identifier
Div"]
015->0151
0152[label="type
int"]
015->0152
0153[label="Identifier
num"]
015->0153
0154[label="varDeclaration
intcount01;"]
015->0154
01540[label="type
int"]
0154->01540
01541[label="Identifier
count01"]
0154->01541
0155[label="varDeclaration
intcount02;"]
015->0155
01550[label="type
int"]
0155->01550
01551[label="Identifier
count02"]
0155->01551
0156[label="varDeclaration
intaux03;"]
015->0156
01560[label="type
int"]
0156->01560
01561[label="Identifier
aux03"]
0156->01561
0157[label="statement
count01=0;"]
015->0157
01570[label="Identifier
count01"]
0157->01570
01571[label="expression
0"]
0157->01571
015710[label="INT
0"]
01571->015710
0158[label="statement
count02=0;"]
015->0158
01580[label="Identifier
count02"]
0158->01580
01581[label="expression
0"]
0158->01581
015810[label="INT
0"]
01581->015810
0159[label="statement
aux03=num-1;"]
015->0159
01590[label="Identifier
aux03"]
0159->01590
01591[label="expression
num-1"]
0159->01591
015910[label="expression
num"]
01591->015910
0159100[label="Identifier
num"]
015910->0159100
015911[label="expression
1"]
01591->015911
0159110[label="INT
1"]
015911->0159110
01510[label="statement
while(count02<aux03){count01=count01+1;count02=count02+2;}"]
015->01510
015100[label="expression
count02<aux03"]
01510->015100
0151000[label="expression
count02"]
015100->0151000
01510000[label="Identifier
count02"]
0151000->01510000
0151001[label="expression
aux03"]
015100->0151001
01510010[label="Identifier
aux03"]
0151001->01510010
015101[label="statement
{count01=count01+1;count02=count02+2;}"]
01510->015101
0151010[label="statement
count01=count01+1;"]
015101->0151010
01510100[label="Identifier
count01"]
0151010->01510100
01510101[label="expression
count01+1"]
0151010->01510101
015101010[label="expression
count01"]
01510101->015101010
0151010100[label="Identifier
count01"]
015101010->0151010100
015101011[label="expression
1"]
01510101->015101011
0151010110[label="INT
1"]
015101011->0151010110
0151011[label="statement
count02=count02+2;"]
015101->0151011
01510110[label="Identifier
count02"]
0151011->01510110
01510111[label="expression
count02+2"]
0151011->01510111
015101110[label="expression
count02"]
01510111->015101110
0151011100[label="Identifier
count02"]
015101110->0151011100
015101111[label="expression
2"]
01510111->015101111
0151011110[label="INT
2"]
015101111->0151011110
01511[label="expression
count01"]
015->01511
015110[label="Identifier
count01"]
01511->015110
016[label="methodDeclaration
publicbooleanCompare(intnum1,intnum2){booleanretval;intaux02;retval=false;aux02=num2+1;if(num1<num2)retval=false;elseif(!(num1<aux02))retval=false;elseretval=true;returnretval;}"]
01->016
0160[label="type
boolean"]
016->0160
0161[label="Identifier
Compare"]
016->0161
0162[label="type
int"]
016->0162
0163[label="Identifier
num1"]
016->0163
0164[label="type
int"]
016->0164
0165[label="Identifier
num2"]
016->0165
0166[label="varDeclaration
booleanretval;"]
016->0166
01660[label="type
boolean"]
0166->01660
01661[label="Identifier
retval"]
0166->01661
0167[label="varDeclaration
intaux02;"]
016->0167
01670[label="type
int"]
0167->01670
01671[label="Identifier
aux02"]
0167->01671
0168[label="statement
retval=false;"]
016->0168
01680[label="Identifier
retval"]
0168->01680
01681[label="expression
false"]
0168->01681
0169[label="statement
aux02=num2+1;"]
016->0169
01690[label="Identifier
aux02"]
0169->01690
01691[label="expression
num2+1"]
0169->01691
016910[label="expression
num2"]
01691->016910
0169100[label="Identifier
num2"]
016910->0169100
016911[label="expression
1"]
01691->016911
0169110[label="INT
1"]
016911->0169110
01610[label="statement
if(num1<num2)retval=false;elseif(!(num1<aux02))retval=false;elseretval=true;"]
016->01610
016100[label="expression
num1<num2"]
01610->016100
0161000[label="expression
num1"]
016100->0161000
01610000[label="Identifier
num1"]
0161000->01610000
0161001[label="expression
num2"]
016100->0161001
01610010[label="Identifier
num2"]
0161001->01610010
016101[label="statement
retval=false;"]
01610->016101
0161010[label="Identifier
retval"]
016101->0161010
0161011[label="expression
false"]
016101->0161011
016102[label="statement
if(!(num1<aux02))retval=false;elseretval=true;"]
01610->016102
0161020[label="expression
!(num1<aux02)"]
016102->0161020
01610200[label="expression
(num1<aux02)"]
0161020->01610200
016102000[label="expression
num1<aux02"]
01610200->016102000
0161020000[label="expression
num1"]
016102000->0161020000
01610200000[label="Identifier
num1"]
0161020000->01610200000
0161020001[label="expression
aux02"]
016102000->0161020001
01610200010[label="Identifier
aux02"]
0161020001->01610200010
0161021[label="statement
retval=false;"]
016102->0161021
01610210[label="Identifier
retval"]
0161021->01610210
01610211[label="expression
false"]
0161021->01610211
0161022[label="statement
retval=true;"]
016102->0161022
01610220[label="Identifier
retval"]
0161022->01610220
01610221[label="expression
true"]
0161022->01610221
01611[label="expression
retval"]
016->01611
016110[label="Identifier
retval"]
01611->016110
017[label="methodDeclaration
publicintPrint(){intj;j=1;while(j<(size)){System.out.println(number[j]);j=j+1;}System.out.println(99999);return0;}"]
01->017
0170[label="type
int"]
017->0170
0171[label="Identifier
Print"]
017->0171
0172[label="varDeclaration
intj;"]
017->0172
01720[label="type
int"]
0172->01720
01721[label="Identifier
j"]
0172->01721
0173[label="statement
j=1;"]
017->0173
01730[label="Identifier
j"]
0173->01730
01731[label="expression
1"]
0173->01731
017310[label="INT
1"]
01731->017310
0174[label="statement
while(j<(size)){System.out.println(number[j]);j=j+1;}"]
017->0174
01740[label="expression
j<(size)"]
0174->01740
017400[label="expression
j"]
01740->017400
0174000[label="Identifier
j"]
017400->0174000
017401[label="expression
(size)"]
01740->017401
0174010[label="expression
size"]
017401->0174010
01740100[label="Identifier
size"]
0174010->01740100
01741[label="statement
{System.out.println(number[j]);j=j+1;}"]
0174->01741
017410[label="statement
System.out.println(number[j]);"]
01741->017410
0174100[label="expression
number[j]"]
017410->0174100
01741000[label="expression
number"]
0174100->01741000
017410000[label="Identifier
number"]
01741000->017410000
01741001[label="expression
j"]
0174100->01741001
017410010[label="Identifier
j"]
01741001->017410010
017411[label="statement
j=j+1;"]
01741->017411
0174110[label="Identifier
j"]
017411->0174110
0174111[label="expression
j+1"]
017411->0174111
01741110[label="expression
j"]
0174111->01741110
017411100[label="Identifier
j"]
01741110->017411100
01741111[label="expression
1"]
0174111->01741111
017411110[label="INT
1"]
01741111->017411110
0175[label="statement
System.out.println(99999);"]
017->0175
01750[label="expression
99999"]
0175->01750
017500[label="INT
99999"]
01750->017500
0176[label="expression
0"]
017->0176
01760[label="INT
0"]
0176->01760
018[label="methodDeclaration
publicintInit(intsz){intj;intk;intaux02;intaux01;size=sz;number=newint[sz];j=1;k=size+1;while(j<(size)){aux01=2*j;aux02=k-3;number[j]=aux01+aux02;j=j+1;k=k-1;}return0;}"]
01->018
0180[label="type
int"]
018->0180
0181[label="Identifier
Init"]
018->0181
0182[label="type
int"]
018->0182
0183[label="Identifier
sz"]
018->0183
0184[label="varDeclaration
intj;"]
018->0184
01840[label="type
int"]
0184->01840
01841[label="Identifier
j"]
0184->01841
0185[label="varDeclaration
intk;"]
018->0185
01850[label="type
int"]
0185->01850
01851[label="Identifier
k"]
0185->01851
0186[label="varDeclaration
intaux02;"]
018->0186
01860[label="type
int"]
0186->01860
01861[label="Identifier
aux02"]
0186->01861
0187[label="varDeclaration
intaux01;"]
018->0187
01870[label="type
int"]
0187->01870
01871[label="Identifier
aux01"]
0187->01871
0188[label="statement
size=sz;"]
018->0188
01880[label="Identifier
size"]
0188->01880
01881[label="expression
sz"]
0188->01881
018810[label="Identifier
sz"]
01881->018810
0189[label="statement
number=newint[sz];"]
018->0189
01890[label="Identifier
number"]
0189->01890
01891[label="expression
newint[sz]"]
0189->01891
018910[label="expression
sz"]
01891->018910
0189100[label="Identifier
sz"]
018910->0189100
01810[label="statement
j=1;"]
018->01810
018100[label="Identifier
j"]
01810->018100
018101[label="expression
1"]
01810->018101
0181010[label="INT
1"]
018101->0181010
01811[label="statement
k=size+1;"]
018->01811
018110[label="Identifier
k"]
01811->018110
018111[label="expression
size+1"]
01811->018111
0181110[label="expression
size"]
018111->0181110
01811100[label="Identifier
size"]
0181110->01811100
0181111[label="expression
1"]
018111->0181111
01811110[label="INT
1"]
0181111->01811110
01812[label="statement
while(j<(size)){aux01=2*j;aux02=k-3;number[j]=aux01+aux02;j=j+1;k=k-1;}"]
018->01812
018120[label="expression
j<(size)"]
01812->018120
0181200[label="expression
j"]
018120->0181200
01812000[label="Identifier
j"]
0181200->01812000
0181201[label="expression
(size)"]
018120->0181201
01812010[label="expression
size"]
0181201->01812010
018120100[label="Identifier
size"]
01812010->018120100
018121[label="statement
{aux01=2*j;aux02=k-3;number[j]=aux01+aux02;j=j+1;k=k-1;}"]
01812->018121
0181210[label="statement
aux01=2*j;"]
018121->0181210
01812100[label="Identifier
aux01"]
0181210->01812100
01812101[label="expression
2*j"]
0181210->01812101
018121010[label="expression
2"]
01812101->018121010
0181210100[label="INT
2"]
018121010->0181210100
018121011[label="expression
j"]
01812101->018121011
0181210110[label="Identifier
j"]
018121011->0181210110
0181211[label="statement
aux02=k-3;"]
018121->0181211
01812110[label="Identifier
aux02"]
0181211->01812110
01812111[label="expression
k-3"]
0181211->01812111
018121110[label="expression
k"]
01812111->018121110
0181211100[label="Identifier
k"]
018121110->0181211100
018121111[label="expression
3"]
01812111->018121111
0181211110[label="INT
3"]
018121111->0181211110
0181212[label="statement
number[j]=aux01+aux02;"]
018121->0181212
01812120[label="Identifier
number"]
0181212->01812120
01812121[label="expression
j"]
0181212->01812121
018121210[label="Identifier
j"]
01812121->018121210
01812122[label="expression
aux01+aux02"]
0181212->01812122
018121220[label="expression
aux01"]
01812122->018121220
0181212200[label="Identifier
aux01"]
018121220->0181212200
018121221[label="expression
aux02"]
01812122->018121221
0181212210[label="Identifier
aux02"]
018121221->0181212210
0181213[label="statement
j=j+1;"]
018121->0181213
01812130[label="Identifier
j"]
0181213->01812130
01812131[label="expression
j+1"]
0181213->01812131
018121310[label="expression
j"]
01812131->018121310
0181213100[label="Identifier
j"]
018121310->0181213100
018121311[label="expression
1"]
01812131->018121311
0181213110[label="INT
1"]
018121311->0181213110
0181214[label="statement
k=k-1;"]
018121->0181214
01812140[label="Identifier
k"]
0181214->01812140
01812141[label="expression
k-1"]
0181214->01812141
018121410[label="expression
k"]
01812141->018121410
0181214100[label="Identifier
k"]
018121410->0181214100
018121411[label="expression
1"]
01812141->018121411
0181214110[label="INT
1"]
018121411->0181214110
01813[label="expression
0"]
018->01813
018130[label="INT
0"]
01813->018130
02[label="EOF
<EOF>"]
0->02
}
